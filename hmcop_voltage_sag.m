% Hamiltonian Monte Carlo sampler for Voltage sag assesment  

clc;clear;

rand('seed',1310);
randn('seed',1310);

chain_total={}; % posterior samples generated for each monitoring point
taxa_aceit = {}; % acceptance rate sample for each monitoring point

% Choose the test-system: IEEE 24 bus or 1772-bus (uncomment and change the path)
% The sag data was generated by a monte carlo simulation using a short
% circuit software
% NumPMN is the number of monitoring points for each system

d1='C:\Users\diogo_reis\Dropbox\atual\Review-artigo-IJEPES\HMCOp-github\sag_data_ieee_24bus';NumPMN=9;
% d1='C:\Users\diogo_reis\Dropbox\atual\Review-artigo-IJEPES\HMCOp-github\sag_data_1772bus';NumPMN=20;

mcs_sag_data=load(d1); %loading the sag data from Monte Carlo Simulation

N=length(mcs_sag_data); % dataset length 
pmon=1; % monitoring point (plot)
sarfi_index=zeros(N,NumPMN); % SARFI-0.9 index for each monitoring point

% lamdba parameter is modeled as a Gamma distribution 
% Choose the shape (a) and scale (b) of the Poisson priors
lambdaPrior_a=1; % prior value for the parameter "a" (scale) in Poisson Distribution
lambdaPrior_b=1; % prior value for "b" (shape) in Poisson Distribution
inic_samples=100; % number of initial samples

for i=1:NumPMN
logpdf = @(Parameters)logPosteriorPoisson(Parameters,mcs_sag_data(1:inic_samples,i), ...
   lambdaPrior_a,lambdaPrior_b,inic_samples);

startpoint = mean(mcs_sag_data(1:inic_samples,i)); 

% Tuning the step size (Optimization)
 smp = hmcSampler(logpdf,startpoint);
[smp,tuneinfo] = tuneSampler(smp,'TargetAcceptanceRatio',0.989);

NumSamples=5000; %number of samples for parameter estimation

% generating samples 
Burnin=0; % number of descarted samples

% print iteration details (only for pmon)
if i==pmon
    level = 1;
else
    level=0;
end

[chain,endpoint,accratio] = drawSamples(smp,'NumSamples',NumSamples,'Burnin',Burnin,'VerbosityLevel',level,'NumPrint',300);
taxa_aceit{1,1}(i,1)=accratio; % saving the acceptance rate
diags{1,1}(i,:) = diagnostics(smp,chain); % saving the performance metrics
chain_total{1,1}(:,i)=chain; % saving the samples generated for each monitoration point 

% Generating the distribution for SARFI-0.9 index
pd2 = makedist('Poisson','lambda',mean(chain)); % Creating Poisson distribution
sarfi_index(:,i)=random(pd2,N,1); % generating samples from Poisson distribution
end

%% HISTOGRAMS 
figure
histogram(mcs_sag_data(:,pmon),'Normalization','probability','BinWidth',0.5)
hold on
histogram(sarfi_index(:,pmon),'Normalization','probability','BinWidth',0.5)
legend({'MCSRS','HMCOp'},'Location','northeast')
title('SARFI-0.9 P01 -  IEEE 24 bus')
% title('SARFI-0.9 P01 -  1772 bus system')
xlabel('Number of sags/year')
ylabel('Probability')

